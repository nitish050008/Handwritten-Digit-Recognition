def one_time():    
    import pyscreenshot as ImageGrab
    import time

    image_folder="captured_images/8/"
    for i in range(0,2):
        time.sleep(6)
        im=ImageGrab.grab(bbox=(15,155,430,480))
        print("saved..........",i)
        im.save(image_folder+str(i)+".png")
        print("Clear the screen now and print......")


Generate dataset

import cv2
import csv
import glob

header  =["label"]
for i in range(0,784):
    header.append("pixel"+str(i))
with open('dataset.csv', 'a') as f:
    writer = csv.writer(f)
    writer.writerow(header)
for label in range(10):
    dirList = glob.glob("captured_images/"+str(label)+"/*.png")
    
    for img_path in dirList:
        im= cv2.imread(img_path)
        im_gray = cv2.cvtColor(im,cv2.COLOR_BGR2GRAY)
        im_gray = cv2.GaussianBlur(im_gray,(15,15), 0)
        roi= cv2.resize(im_gray,(28,28), interpolation=cv2.INTER_AREA)
        
        data=[]
        data.append(label)
        rows, cols = roi.shape
        
        ##add pixel one by one into data
        for i in range(rows):
            for j in range(cols):
                k =roi[i,j]
                if k>100:
                    k=1
                else:
                    k=0
                data.append(k)
        with open('dataset.csv', 'a') as f:
            writer = csv.writer(f)
            writer.writerow(data)

load the dataset

import pandas as pd
from sklearn.utils import shuffle
data  =pd.read_csv('dataset.csv')
data=shuffle(data)
data

	label	pixel0	pixel1	pixel2	pixel3	pixel4	pixel5	pixel6	pixel7	pixel8	...	pixel774	pixel775	pixel776	pixel777	pixel778	pixel779	pixel780	pixel781	pixel782	pixel783
526	5	0	0	0	0	0	0	0	0	0	...	0	0	0	0	0	0	0	0	0	0
329	3	0	0	0	0	0	0	0	0	0	...	0	0	0	0	0	0	0	0	0	0
95	0	0	0	0	0	0	0	0	0	0	...	0	0	0	0	0	0	0	0	0	0
78	0	0	0	0	0	0	0	0	0	0	...	0	0	0	0	0	0	0	0	0	0
825	8	0	0	0	0	0	0	0	0	0	...	0	0	0	0	0	0	0	0	0	0
282	2	0	0	0	0	0	0	0	0	0	...	0	0	0	0	0	0	0	0	0	0
503	5	0	0	0	0	0	0	0	0	0	...	0	0	0	0	0	0	0	0	0	0
918	9	0	0	0	0	0	0	0	0	0	...	0	0	0	0	0	0	0	0	0	0
186	1	0	0	0	0	0	0	0	0	0	...	0	0	0	0	0	0	0	0	0	0
418	4	0	0	0	0	0	0	0	0	0	...	0	0	0	0	0	0	0	0	0	0
353	3	0	0	0	0	0	0	0	0	0	...	0	0	0	0	0	0	0	0	0	0
159	1	0	0	0	0	0	0	0	0	0	...	0	0	0	0	0	0	0	0	0	0
672	6	0	0	0	0	0	0	0	0	0	...	0	0	0	0	0	0	0	0	0	0
174	1	0	0	0	0	0	0	0	0	0	...	0	0	0	0	0	0	0	0	0	0
32	0	0	0	0	0	0	0	0	0	0	...	0	0	0	0	0	0	0	0	0	0
297	2	0	0	0	0	0	0	0	0	0	...	0	0	0	0	0	0	0	0	0	0
865	8	0	0	0	0	0	0	0	0	0	...	0	0	0	0	0	0	0	0	0	0
565	5	0	0	0	0	0	0	0	0	0	...	0	0	0	0	0	0	0	0	0	0
525	5	0	0	0	0	0	0	0	0	0	...	0	0	0	0	0	0	0	0	0	0
658	6	0	0	0	0	0	0	0	0	0	...	0	0	0	0	0	0	0	0	0	0
461	4	0	0	0	0	0	0	0	0	0	...	0	0	0	0	0	0	0	0	0	0
345	3	0	0	0	0	0	0	0	0	0	...	0	0	0	0	0	0	0	0	0	0
946	9	0	0	0	0	0	0	0	0	0	...	0	0	0	0	0	0	0	0	0	0
663	6	0	0	0	0	0	0	0	0	0	...	0	0	0	0	0	0	0	0	0	0
130	1	0	0	0	0	0	0	0	0	0	...	0	0	0	0	0	0	0	0	0	0
41	0	0	0	0	0	0	0	0	0	0	...	0	0	0	0	0	0	0	0	0	0
396	3	0	0	0	0	0	0	0	0	0	...	0	0	0	0	0	0	0	0	0	0
510	5	0	0	0	0	0	0	0	0	0	...	0	0	0	0	0	0	0	0	0	0
817	8	0	0	0	0	0	0	0	0	0	...	0	0	0	0	0	0	0	0	0	0
965	9	0	0	0	0	0	0	0	0	0	...	0	0	0	0	0	0	0	0	0	0
...	...	...	...	...	...	...	...	...	...	...	...	...	...	...	...	...	...	...	...	...	...
36	0	0	0	0	0	0	0	0	0	0	...	0	0	0	0	0	0	0	0	0	0
662	6	0	0	0	0	0	0	0	0	0	...	0	0	0	0	0	0	0	0	0	0
542	5	0	0	0	0	0	0	0	0	0	...	0	0	0	0	0	0	0	0	0	0
480	4	0	0	0	0	0	0	0	0	0	...	0	0	0	0	0	0	0	0	0	0
615	6	0	0	0	0	0	0	0	0	0	...	0	0	0	0	0	0	0	0	0	0
537	5	0	0	0	0	0	0	0	0	0	...	0	0	0	0	0	0	0	0	0	0
631	6	0	0	0	0	0	0	0	0	0	...	0	0	0	0	0	0	0	0	0	0
538	5	0	0	0	0	0	0	0	0	0	...	0	0	0	0	0	0	0	0	0	0
557	5	0	0	0	0	0	0	0	0	0	...	0	0	0	0	0	0	0	0	0	0
921	9	0	0	0	0	0	0	0	0	0	...	0	0	0	0	0	0	0	0	0	0
759	7	0	0	0	0	0	0	0	0	0	...	0	0	0	0	0	0	0	0	0	0
203	2	0	0	0	0	0	0	0	0	0	...	0	0	0	0	0	0	0	0	0	0
168	1	0	0	0	0	0	0	0	0	0	...	0	0	0	0	0	0	0	0	0	0
877	8	0	0	0	0	0	0	0	0	0	...	0	0	0	0	0	0	0	0	0	0
170	1	0	0	0	0	0	0	0	0	0	...	0	0	0	0	0	0	0	0	0	0
972	9	0	0	0	0	0	0	0	0	0	...	0	0	0	0	0	0	0	0	0	0
404	4	0	0	0	0	0	0	0	0	0	...	0	0	0	0	0	0	0	0	0	0
519	5	0	0	0	0	0	0	0	0	0	...	0	0	0	0	0	0	0	0	0	0
806	8	0	0	0	0	0	0	0	0	0	...	0	0	0	0	0	0	0	0	0	0
397	3	0	0	0	0	0	0	0	0	0	...	0	0	0	0	0	0	0	0	0	0
165	1	0	0	0	0	0	0	0	0	0	...	0	0	0	0	0	0	0	0	0	0
835	8	0	0	0	0	0	0	0	0	0	...	0	0	0	0	0	0	0	0	0	0
568	5	0	0	0	0	0	0	0	0	0	...	0	0	0	0	0	0	0	0	0	0
243	2	0	0	0	0	0	0	0	0	0	...	0	0	0	0	0	0	0	0	0	0
996	9	0	0	0	0	0	0	0	0	0	...	0	0	0	0	0	0	0	0	0	0
634	6	0	0	0	0	0	0	0	0	0	...	0	0	0	0	0	0	0	0	0	0
441	4	0	0	0	0	0	0	0	0	0	...	0	0	0	0	0	0	0	0	0	0
549	5	0	0	0	0	0	0	0	0	0	...	0	0	0	0	0	0	0	0	0	0
493	4	0	0	0	0	0	0	0	0	0	...	0	0	0	0	0	0	0	0	0	0
393	3	0	0	0	0	0	0	0	0	0	...	0	0	0	0	0	0	0	0	0	0
1000 rows Ã— 785 columns

separation of dependent and independent variable
X = data.drop(["label"],axis=1)
Y= data["label"]


preview of one image using matplotlib

%matplotlib inline
import matplotlib.pyplot as plt
import cv2
idx = 929
img = X.loc[idx].values.reshape(28,28)
print(Y[idx])
plt.imshow(img)


<matplotlib.image.AxesImage at 0x2d4c09e5710>

Train-Test split
from sklearn.model_selection import train_test_split
train_x,test_x,train_y,test_y = train_test_split(X,Y, test_size = 0.2)

Fit the model using svc and also to save the model using joblib

import joblib
from sklearn.svm import SVC
classifier=SVC(kernel="linear", random_state=6)
classifier.fit(train_x,train_y)
joblib.dump(classifier, "model/digit_recognizer")

calculate accuracy

from sklearn import metrics
prediction=classifier.predict(test_x)
print("Accuracy= ",metrics.accuracy_score(prediction, test_y))

Accuracy=  0.835

prediction of image drawn in paint

import joblib
import cv2
import numpy as np #pip install numpy
import time
import pyscreenshot as ImageGrab

model=joblib.load("model/digit_recognizer")
images_folder="img/"

while True:
    img=ImageGrab.grab(bbox=(15,155,430,480))
    img.save(images_folder+"img.png")
    im = cv2.imread(images_folder+"img.png")
    im_gray = cv2.cvtColor(im,cv2.COLOR_BGR2GRAY)
    im_gray  =cv2.GaussianBlur(im_gray, (15,15), 0)
    
    #Threshold the image
    ret, im_th = cv2.threshold(im_gray,100, 255, cv2.THRESH_BINARY)
    roi = cv2.resize(im_th, (28,28), interpolation  =cv2.INTER_AREA)
    
    rows,cols=roi.shape
    
    X = []
    ## Add pixel one by one into data array
    for i in range(rows):
        for j in range(cols):
            k = roi[i,j]
            if k>100:
                k=1
            else:
                k=0
            X.append(k)
            
    predictions  =model.predict([X])
    print("Prediction:",predictions[0])
    cv2.putText(im, "Prediction is: "+str(predictions[0]), (20,20), 0, 0.8,(0,255,0),2,cv2.LINE_AA)

    cv2.startWindowThread()
    cv2.namedWindow("Result")
    cv2.imshow("Result",im)
    cv2.waitKey(10000)
    if cv2.waitKey(1)==13: #27 is the ascii value of esc, 13 is the ascii value of enter
        break
cv2.destroyAllWindows()

